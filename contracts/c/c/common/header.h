#ifndef CKB_LUA_HEADER
#define CKB_LUA_HEADER

#include <stdlib.h>
#include "ckb_syscalls.h"
#include "blockchain.h"

#define CHECK_RET(x) \
    ret = x;         \
    if (ret != 0)    \
    {                \
        return ret;  \
    }

#define DEBUG_PRINT(s, ...)             \
    {                                   \
        char debug[512];                \
        sprintf(debug, s, __VA_ARGS__); \
        ckb_debug(debug);               \
    }

#define MAX_CACHE_SIZE (64 * 1024)
#define MAX_JSON_SIZE 1024
#define MAX_FUNCTION_CALL_SIZE 256
#define MAX_JSON_TOKEN_COUNT 64
#define MAX_SAME_REQUEST_COUNT 32
#define MAX_CELLDEP_COUNT 8
#define MAX_FLOATING_COUNT 4
#define HASH_SIZE 32
#define HASH_HEX_SIZE (HASH_SIZE * 2)
#define HALF_HASH_SIZE (HASH_SIZE / 2)
#define CKB_ONE 100000000

#define LUA_PREFIX "return "
#define LUA_INPUT_OFFSET "__input_offset"
#define LUA_OUTPUT_OFFSET "__output_offset"
#define LUA_UNCHECKED "__koc_unchecked"
#define LUA_KOC_BACKUP "__koc_backup"
#define LUA_KOC "KOC"

enum FALG
{
    FLAG_GLOBAL,
    FLAG_PERSONAL,
    FLAG_REQUEST
};

enum ERROR
{
    ERROR_LOADING_SCRIPT = 4,
    ERROR_UNEXPECTED_FALG,
    ERROR_NO_REQUEST_CELLS,
    ERROR_LOADING_REQUEST_CELL,
    ERROR_LOADING_GLOBAL_CELL,
    ERROR_LOADING_PERSONAL_CELL,
    ERROR_CHECK_GLOBAL_MODE,
    ERROR_CHECK_PERSONAL_MODE,
    ERROR_CHECK_PARALLEL_CKB,
    ERROR_LUA_INJECT,
    ERROR_LUA_SCRIPT_ARGS,
    ERROR_LUA_DEEP_COPY,
    ERROR_LUA_TABLE_MERGE,
    ERROR_LUA_COMPARE_TABLE,
    ERROR_GLOBAL_ARGS,
    ERROR_REQUEST_ARGS,
    ERROR_PERSONAL_ARGS,
    ERROR_REQUEST_CELLS_FORMAT,
    ERROR_REQUEST_CELLS_DATA,
    ERROR_REQUEST_CELLS_TYPESCRIPT,
    ERROR_REQUEST_CELLS_LOCKSCRIPT,
    ERROR_FLAG_BYTES,
    ERROR_REQUEST_BYTES,
    ERROR_NO_DEPLOYMENT_CELL,
    ERROR_DEPLOYMENT_FORMAT,
    ERROR_GLOBAL_DATA_FORMAT,
    ERROR_RUN_LUA_CODE,
    ERROR_CHECK_LUA_GLOBAL_DATA,
    ERROR_CHECK_LUA_PERSONAL_DATA,
    ERROR_REQUEST_EXCESSIVE,
    ERROR_REQUEST_NOT_FOUND,
    ERROR_REQUEST_FLAG,
    ERROR_FUNCTION_CELLDEP_EXCESSIVE,
    ERROR_FLOATING_LOCKSCRIPT_EXCESSIVE,
    ERROR_MISS_FUNCTION_CELLDEP,
    ERROR_UNMATCHED_REQUEST_CKB,
    ERROR_UNMATCHED_INPUT_OFFSET,
    ERROR_TABLE_TO_SJON,
    ERROR_JSON_TO_TABLE,
    ERROR_UNINITIAL_CONTEXT,
    ERROR_CALCULATE_RANDOM,
    ERROR_NO_PERONSAL_NO_DATA,
};

#endif